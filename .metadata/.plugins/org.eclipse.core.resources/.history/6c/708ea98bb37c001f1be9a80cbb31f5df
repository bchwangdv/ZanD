<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>THE ZD</title>
<!-- JQuery 3.7.1-->
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>
</head>
<!-- navbar -->
<div th:replace="~{navbar :: navbar}"></div>
<!-- css -->
<link type="text/css" href='css/searchResult.css' rel="stylesheet">
<body>
<div class="halfline"></div>
<div class="contaioner">
	<div class="namecardContainer">
		<div class="namecard">
			<div id="nickname">[[${nickname}]]</div>
			<div id="division"></div>
		</div>
		<!-- 여백 -->
		<div style="width: 500px"></div>
	</div>
	<input type="hidden" id="ouidDiv"></input>
	<div class="resultContainer">
		<div id="searchResult"></div>
	</div>
</div>
<script th:inline="javascript">
const API_KEY = "test_cae361c9b131e27b911a544f8f7a1b8b30a26678c7d36bb7ae8f2747f4a6fa18efe8d04e6d233bd35cf2fabdeb93fb0d";
const resultDiv = $("#searchResult");

const nickname = [[${nickname}]]
const ouidReq = "https://open.api.nexon.com/fconline/v1/id?nickname=" + nickname;
const ouidObj = fetch(ouidReq, {
    headers:{
      "x-nxopen-api-key": API_KEY
    }
})
	.then(response => response.json())
	.then(data => {
		const ouidDiv = document.getElementById("ouidDiv");
		const ouid = data.ouid
		ouidDiv.value = ouid;
		const matchReq = "https://open.api.nexon.com/fconline/v1/user/match?ouid=" + ouid + "&matchtype=50";
		const divisionReq = "https://open.api.nexon.com/fconline/v1/user/maxdivision?ouid=" + ouid;
		
		fetch(divisionReq, {
			headers: {
	            "x-nxopen-api-key": API_KEY
	        }
		})
		.then(response => response.json())
	    .then(userDivisions => {
	    	const 1v1officialDivision = document.getElementById("1v1officialDivision");
	    	for(const userDivision of userDivisions) {
	    		if(userDivision.matchType == 50) {
		    		divisionDiv.innerHTML = userDivision.division;
		    	}
	    	}
	    	
	    	const DivisionListReq = "https://open.api.nexon.com/static/fconline/meta/division.json";
	    	fetch(DivisionListReq, {})
	    	.then(response => response.json())
	    	.then(divisionList => {
	    		for(const division of divisionList) {
	    			if(divisionDiv.innerHTML == division.divisionId) {
	    				divisionDiv.innerHTML = "1v1 공식경기 최고티어 : ";
	    				divisionDiv.innerHTML += '<img class="divisionImg" src="https://ssl.nexon.com/s2/game/fo4/obt/rank/large/update_2009/ico_rank' + divisionList.findIndex(i => i == division) + '_m.png">'
	    				divisionDiv.innerHTML += "(" + division.divisionName + ")";
	    			}
	    		}
			})
	    })
	    .catch(error => console.error(error));
	    	
		fetch(matchReq, {
	        headers: {
	            "x-nxopen-api-key": API_KEY
	        }
	    })
	    .then(response => response.json())
	    .then(matchIds => {
	    	
	    	if (matchIds.length == 0) {
	    		const matchContainer = document.createElement("div");
	    		// 스타일을 위한 클래스 추가
                matchContainer.className = "noResult";
                matchContainer.innerText = '최근 경기 결과가 없습니다.'
                resultDiv.append(matchContainer);
            	return;
            }
	    	
	        const matchDetailPromises = matchIds.map(matchId => {
			const matchDetailReq = "https://open.api.nexon.com/fconline/v1/match-detail?matchid=" + matchId;
			return fetch(matchDetailReq, {
					headers: {
						"x-nxopen-api-key": API_KEY
					}
				}).then(response => response.json());
	        });
	        
	        Promise.all(matchDetailPromises)
	        .then(matchDetails => {
	        	
	        	matchDetails.sort((a, b) => new Date(b.matchDate) - new Date(a.matchDate));
	        	
	            const usersOuid = $("#ouidDiv").val();

	            matchDetails.forEach(data => {
	            	const matchContainer = document.createElement("div");
	            	// 스타일을 위한 클래스 추가
	                matchContainer.className = "match-container";
					
	                const dateDiv = document.createElement("div");
	                const matchTypeDiv = document.createElement("div");
	                const opResultDiv = document.createElement("div");
	                const matchResultDiv = document.createElement("div");
					
	                const KSTmatchDate = new Date(data.matchDate);
	                KSTmatchDate.setHours(KSTmatchDate.getHours()+9);
	                
					const matchYear = KSTmatchDate.getFullYear();
					const matchMonth = String(KSTmatchDate.getMonth() + 1).padStart(2, '0');
					const matchDay = String(KSTmatchDate.getDate()).padStart(2, '0');
					const matchHours = String(KSTmatchDate.getHours()).padStart(2, '0');
					const matchMinutes = String(KSTmatchDate.getMinutes()).padStart(2, '0');
					const matchTime = matchHours + ':' + matchMinutes;
	                const matchDate = matchYear + '년 ' + matchMonth + '월 ' + matchDay + '일 ' + matchTime
	                
	            	// 날짜 및 시간 출력
					dateDiv.innerHTML = matchDate;
					matchContainer.appendChild(dateDiv);

	                // 매치 타입 출력
	                matchTypeDiv.innerHTML = '매치타입 : 1v1 공식경기';
	                matchContainer.appendChild(matchTypeDiv);

	                // 매치 결과 출력
	                // 검색 계정을 앞에 둠
					if (data.matchInfo[0].ouid == usersOuid) {
						var myInfo = data.matchInfo[0]
						var opInfo = data.matchInfo[1]
					} else {
						var myInfo = data.matchInfo[1]
						var opInfo = data.matchInfo[0]
					}
	                    
					opResultDiv.innerHTML = '상대 : ' + opInfo.nickname;
					matchContainer.appendChild(opResultDiv);
					matchResultDiv.innerHTML = myInfo.shoot.goalTotal + ' : ' + opInfo.shoot.goalTotal + ' ' + myInfo.matchDetail.matchResult;
					
					if(!(myInfo.shoot.shootOutScore == 0 && opInfo.shoot.shootOutScore == 0)){
						matchResultDiv.innerHTML += ' (' + myInfo.shoot.shootOutScore + '-' + opInfo.shoot.shootOutScore + ')';
					}
					
					matchContainer.appendChild(matchResultDiv);
					
					// 승,패에 색 추가
					if (myInfo.matchDetail.matchResult == '승') {
						matchResultDiv.classList.add('text-primary');
					} else {
						matchResultDiv.classList.add('text-danger');
					}
	                
	                // 결과를 검색 결과 div에 추가
	                resultDiv.append(matchContainer);
	            });
	        })
			.catch(error => console.error(error))
		})
		.catch(error => console.error(error))
	})
	.catch(error => console.error(error))
</script>
</body>
</html>